//
//  AxxessHealthAppApp.swift
//  healthapp
//
//  Created by David Santos on 2/22/25.
//


import SwiftUI
import Firebase

@main
struct AxxessHealthAppApp: App {
    @StateObject var authViewModel = AuthViewModel()
    @StateObject var patientInfoVM = PatientInfoViewModel()
    init() {
        FirebaseApp.configure() // Initialize Firebase
        print("✅ Firebase configured successfully")
    }

    var body: some Scene {
        WindowGroup {
            if authViewModel.isAuthenticated {
                DashboardView()
                    .environmentObject(authViewModel)
                    .environmentObject(patientInfoVM)
            } else {
                LoginView()
                    .environmentObject(authViewModel)
                    .environmentObject(patientInfoVM)
            }
        }
    }
}
import Foundation

struct PatientInfo: Codable {
    var name: String
    var age: String
    var gender: String
    var contactNumber: String
}


import SwiftUI

struct MedicationCard: View {
    let medication: Medication
    let darkRed: Color
    var onToggleTaken: (Bool) -> Void
    @State private var isTaken: Bool
    
    init(medication: Medication, darkRed: Color, onToggleTaken: @escaping (Bool) -> Void) {
        self.medication = medication
        self.darkRed = darkRed
        self.onToggleTaken = onToggleTaken
        _isTaken = State(initialValue: medication.isTaken)
    }
    
    var body: some View {
        HStack {
            VStack(alignment: .leading) {
                Text(medication.name)
                    .font(.headline)
                    .foregroundColor(darkRed)
                Text("Dosage: \(medication.dosage)")
                    .font(.subheadline)
                    .foregroundColor(.gray)
                Text("Time: \(medication.timeOfDay)")
                    .font(.subheadline)
                    .foregroundColor(.gray)
            }
            Spacer()
            Button(action: {
                isTaken.toggle()
                onToggleTaken(isTaken)
            }) {
                Image(systemName: isTaken ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(isTaken ? .green : .gray)
                    .font(.title)
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(10)
        .shadow(radius: 3)
        .padding(.horizontal, 5)
    }
}
// AuthViewModel.swift
import Foundation
import FirebaseCore
import FirebaseAuth
import FirebaseFirestore
//import FirebaseFirestoreSwift

class AuthViewModel: ObservableObject {
    @Published var isAuthenticated = false
    @Published var userRole: String = "" // "Patient" or "Doctor"
    
    init() {
        // If already logged in, set up listener:
        if let user = FirebaseManager.shared.auth.currentUser {
            self.isAuthenticated = true
            self.setupRoleListener(for: user.uid)
        }
    }
    
    func login(email: String, password: String) {
        print("Attempting login with email: \(email)")
        
        FirebaseManager.shared.auth.signIn(withEmail: email, password: password) { [weak self] (result, error) in
            if let error = error {
                print("Login error: \(error.localizedDescription)")
                return
            }
            
            guard let self = self, let user = result?.user else { return }
            print("✅ Login successful!")
            self.setupRoleListener(for: user.uid)
            print("Attempting role lisnter")
            self.isAuthenticated = true
            
            // Set up a snapshot listener to continuously fetch the user role
            
        }
    }
    
    private func setupRoleListener(for uid: String) {
        print("Setting up role listener for uid: \(uid)")
        FirebaseManager.shared.firestore.collection("users").document(uid)
            .addSnapshotListener { [weak self] snapshot, error in
                if let error = error {
                    print("Firestore role listener error: \(error.localizedDescription)")
                    return
                }
                
                if let snapshot = snapshot {
                    print("Snapshot received, exists? \(snapshot.exists)")
                } else {
                    print("No snapshot received for uid: \(uid)")
                }
                
                if let data = snapshot?.data(), let role = data["role"] as? String {
                    DispatchQueue.main.async {
                        print("✅ User role updated: \(role)")
                        self?.userRole = role
                    }
                } else {
                    print("❌ No user role found in Firestore for uid: \(uid)")
                }
            }
    }

    
    func logout() {
        do {
            try FirebaseManager.shared.auth.signOut()
            isAuthenticated = false
            userRole = ""
        } catch {
            print("Logout error: \(error.localizedDescription)")
        }
    }
}
import Foundation
import FirebaseFirestore
//import FirebaseFirestoreSwift
import FirebaseAuth

class MedicationViewModel: ObservableObject {
    @Published var medications: [Medication] = []
    private var listener: ListenerRegistration?
    let userID: String
    
    init(userID: String) {
        self.userID = userID
        guard !userID.isEmpty else {
                    print("⚠️ MedicationViewModel: userID is empty—skipping Firestore fetch.")
                    return
                }
        fetchMedications()
    }
    
    func fetchMedications() {
        guard !userID.isEmpty else { return }
        let db = FirebaseManager.shared.firestore
        listener = db.collection("users").document(userID).collection("medications")
            .addSnapshotListener { [weak self] snapshot, error in
                if let error = error {
                    print("Error fetching medications: \(error.localizedDescription)")
                    return
                }
                guard let documents = snapshot?.documents else { return }
                self?.medications = documents.compactMap { doc in
                    try? doc.data(as: Medication.self)
                }
            }
    }
    
    func updateMedication(_ medication: Medication) {
        let db = FirebaseManager.shared.firestore
        do {
            try db.collection("users").document(userID).collection("medications")
                .document(medication.id.uuidString)
                .setData(from: medication)
        } catch {
            print("Error updating medication: \(error)")
        }
    }
    
    func addMedication(_ medication: Medication) {
        let db = FirebaseManager.shared.firestore
        do {
            try db.collection("users").document(userID).collection("medications")
                .document(medication.id.uuidString)
                .setData(from: medication)
        } catch {
            print("Error adding medication: \(error)")
        }
    }
    
    func deleteMedication(_ medication: Medication) {
        let db = FirebaseManager.shared.firestore
        db.collection("users").document(userID).collection("medications")
            .document(medication.id.uuidString)
            .delete { error in
                if let error = error {
                    print("Error deleting medication: \(error)")
                }
            }
    }
    
    deinit {
        listener?.remove()
    }
}
import Foundation

struct Medication: Identifiable, Codable {
    var id = UUID()
    var name: String
    var dosage: String
    var frequency: String // Example: "Daily", "Every 8 hours"
    var startDate: Date
    var endDate: Date
    var timeOfDay: String // Example: "Morning", "Evening"
    var prescribedBy: String // Doctor's Name or ID
    var isTaken: Bool = false
}
import Foundation
import FirebaseFirestore
//import FirebaseFirestoreSwift

struct DoctorPatient: Identifiable, Codable {
    var id: String  // patient uid
    var name: String
    var email: String
}

class DoctorNetworkViewModel: ObservableObject {
    @Published var patients: [DoctorPatient] = []
    private var listener: ListenerRegistration?
    let doctorUid: String
    
    init(doctorUid: String) {
        self.doctorUid = doctorUid
        fetchPatients()
    }
    
    func fetchPatients() {
        let db = FirebaseManager.shared.firestore
        listener = db.collection("users").document(doctorUid).collection("patients")
            .addSnapshotListener { [weak self] snapshot, error in
                if let error = error {
                    print("Error fetching doctor network: \(error.localizedDescription)")
                    return
                }
                guard let documents = snapshot?.documents else { return }
                self?.patients = documents.compactMap { doc in
                    try? doc.data(as: DoctorPatient.self)
                }
            }
    }
    
    func addPatient(_ patient: DoctorPatient) {
        let db = FirebaseManager.shared.firestore
        do {
            try db.collection("users").document(doctorUid).collection("patients")
                .document(patient.id)
                .setData(from: patient)
        } catch {
            print("Error adding patient: \(error)")
        }
    }
    
    deinit {
        listener?.remove()
    }
}
import FirebaseFirestore
import FirebaseAuth

class PatientInfoViewModel: ObservableObject {
    @Published var patientInfo: Patient?

    func fetchPatientInfo() {
        guard let uid = Auth.auth().currentUser?.uid else { return }

        let userRef = Firestore.firestore().collection("users").document(uid)
        userRef.getDocument { document, error in
            if let document = document, document.exists {
                let data = document.data()
                self.patientInfo = Patient(
                    name: data?["name"] as? String ?? "N/A",
                    age: (data?["age"] as? Int)?.description ?? "N/A", // Convert age to String safely
                    gender: data?["gender"] as? String ?? "N/A",
                    contactNumber: data?["contactNumber"] as? String ?? "N/A",
                    email: data?["email"] as? String ?? "N/A"  // Add this to match the struct
                )
            }
        }
    }
}

// **Struct for Patient**
struct Patient: Codable {
    var name: String
    var age: String  // Changed to String to match Firebase data type
    var gender: String
    var contactNumber: String
    var email: String  // Added missing email property
}

// DashboardView.swift
import SwiftUI
import FirebaseAuth

struct DashboardView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    
    var body: some View {
        NavigationView {
            Group {
                if authViewModel.userRole.lowercased() == "doctor" {
                    DoctorDashboardContent()
                } else {
                    PatientDashboardContent()
                }
            }
            .navigationBarHidden(true)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    ProfileButtonView()
                }
            }
        }
    }
}

// MARK: - Patient Dashboard Content
struct PatientDashboardContent: View {
    // MedicationViewModel fetches medications from "users/{uid}/medications"
    @StateObject private var medicationVM = MedicationViewModel(userID: FirebaseManager.shared.auth.currentUser?.uid ?? "")
    @EnvironmentObject var authViewModel: AuthViewModel
    // Calculate progress based on medications marked as taken.
    var takenMedications: Int {
        medicationVM.medications.filter { $0.isTaken }.count
    }
    var totalMedications: Int {
        medicationVM.medications.count
    }
    var progress: Double {
        totalMedications > 0 ? Double(takenMedications) / Double(totalMedications) : 0
    }
    
    let darkRed = Color(red: 139/255, green: 0, blue: 0)
    
    var body: some View {
        VStack {
            // HEADER: Logo & Progress Bar
            HStack {
                Image("axxess_2")
                    .resizable()
                    .scaledToFit()
                    .frame(height: 50)
                    .padding(.leading, 10)
                
                Spacer()
                
                VStack(alignment: .trailing, spacing: 5) {
                    Text("Medication Progress")
                        .font(.caption)
                        .foregroundColor(darkRed)
                    
                    ProgressView(value: progress, total: 1)
                        .progressViewStyle(LinearProgressViewStyle(tint: darkRed))
                        .frame(width: 120)
                    
                    Text("\(takenMedications)/\(totalMedications) taken")
                        .font(.caption2)
                        .foregroundColor(.gray)
                }
            }
            .padding(.horizontal)
            .padding(.top, 10)
            
            // WELCOME & TITLE
            VStack(alignment: .leading) {
                Text("Welcome")
                    .font(.title3)
                    .foregroundColor(.gray)
                    .padding(.horizontal, 10)
            }
            .frame(maxWidth: .infinity, alignment: .leading)
            
            Text("Dashboard")
                .font(.largeTitle)
                .bold()
                .foregroundColor(darkRed)
                .padding(.top, 5)
            
            // MEDICATION LIST
            VStack(alignment: .leading, spacing: 10) {
                Text("Today's Medications")
                    .font(.title2)
                    .bold()
                    .foregroundColor(darkRed)
                
                if medicationVM.medications.isEmpty {
                    Text("No medications scheduled for today.")
                        .foregroundColor(.gray)
                } else {
                    List {
                        ForEach(medicationVM.medications) { medication in
                            MedicationCard(medication: medication, darkRed: darkRed, onToggleTaken: { newState in
                                var updatedMedication = medication
                                updatedMedication.isTaken = newState
                                medicationVM.updateMedication(updatedMedication)
                            })
                        }
                    }
                    .listStyle(PlainListStyle())
                }
            }
            .padding(.horizontal)
            
            Spacer()
            
            // BOTTOM BUTTONS: Chat and Logout (Patients cannot add medications)
            VStack(spacing: 15) {
                NavigationLink(destination: AIChatView()) {
                    Text("Chat with AI Assistant")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(darkRed)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                        .shadow(radius: 3)
                }
                Button(action: {
                    authViewModel.logout()
                }) {
                    Text("Logout")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.red)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                        .shadow(radius: 3)
                }
            }
            .padding(.horizontal)
            .padding(.bottom, 20)
        }
    }
}

// MARK: - Doctor Dashboard Content
struct DoctorDashboardContent: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @StateObject private var doctorNetworkVM = DoctorNetworkViewModel(doctorUid: FirebaseManager.shared.auth.currentUser?.uid ?? "")
    @State private var showAddPatient = false
    
    let darkRed = Color(red: 139/255, green: 0, blue: 0)

    var body: some View {
        VStack(alignment: .leading) {
            // HEADER with title and "Add Patient" button.
            HStack {
                Text("Doctor Dashboard")
                    .font(.largeTitle)
                    .bold()
                    .foregroundColor(darkRed)
                Spacer()
                Button(action: {
                    showAddPatient = true
                }) {
                    Text("Add Patient")
                        .padding()
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
            }
            .padding()
            
            if doctorNetworkVM.patients.isEmpty {
                Text("No patients in your network.")
                    .foregroundColor(.gray)
                    .padding()
            } else {
                List {
                    ForEach(doctorNetworkVM.patients) { patient in
                        NavigationLink(destination: DoctorPatientMedicationsView(patient: patient)) {
                            VStack(alignment: .leading) {
                                Text(patient.name)
                                    .font(.headline)
                                Text(patient.email)
                                    .font(.subheadline)
                                    .foregroundColor(.gray)
                            }
                        }
                    }
                    .onDelete(perform: deletePatient)  // Enables swipe-to-delete
                }
                .listStyle(PlainListStyle())
            }
            
            Spacer()
            
            Button(action: {
                authViewModel.logout()
            }) {
                Text("Logout")
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.red)
                    .foregroundColor(.white)
                    .cornerRadius(12)
            }
            .padding([.horizontal, .bottom])
        }
        .sheet(isPresented: $showAddPatient) {
            AddPatientView { newPatient in
                doctorNetworkVM.addPatient(newPatient)
            }
        }
    }

    // MARK: - Delete Patient Function
    private func deletePatient(at offsets: IndexSet) {
        for index in offsets {
            let patient = doctorNetworkVM.patients[index]
            //doctorNetworkVM.removePatient(patient)
        }
    }
}


// MARK: - Profile Button
struct ProfileButtonView: View {
    let darkRed = Color(red: 139/255, green: 0, blue: 0)
    var body: some View {
        Button(action: {
            // Implement profile navigation if needed.
        }) {
            Image(systemName: "person.crop.circle.fill")
                .resizable()
                .frame(width: 28, height: 28)
                .foregroundColor(darkRed)
                .shadow(radius: 3)
        }
    }
}

// MARK: - Preview
struct DashboardView_Previews: PreviewProvider {
    static var previews: some View {
        DashboardView().environmentObject(AuthViewModel())
    }
}
import SwiftUI

struct PatientInfoFormView: View {
    @EnvironmentObject var patientInfoVM: PatientInfoViewModel
    @State private var name = ""
    @State private var age = ""
    @State private var gender = ""
    @State private var contactNumber = ""
    @State private var isSaved = false
    @State private var showError = false

    var body: some View {
        Form {
            Section(header: Text("Basic Information")) {
                TextField("Name", text: $name)
                TextField("Age", text: $age)
                    .keyboardType(.numberPad)
                TextField("Gender", text: $gender)
                TextField("Contact Number", text: $contactNumber)
                    .keyboardType(.phonePad)
            }

            Button(action: {
                if name.isEmpty || age.isEmpty || gender.isEmpty || contactNumber.isEmpty {
                    showError = true
                    return
                }
                
                let info = Patient(name: name, age: age, gender: gender, contactNumber: contactNumber, email: "N/A")  // Ensure this struct matches your Firestore model
                
                patientInfoVM.patientInfo = info  // Now this should work

                isSaved = true
            }) {
                Text("Save Information")
                    .foregroundColor(.white)
                    .padding()
                    .background(Color.green)
                    .cornerRadius(10)
            }

            if showError {
                Text("All fields must be filled!")
                    .foregroundColor(.red)
            }

            if isSaved {
                Text("Information Saved Successfully!")
                    .foregroundColor(.green)
            }
        }
        .navigationTitle("Enter Your Info")
    }
}

import SwiftUI

struct MedicationFormView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var name = ""
    @State private var dosage = ""
    @State private var frequency = "Daily"
    @State private var startDate = Date()
    @State private var endDate = Date()
    @State private var timeOfDay = "Morning"
    @State private var prescribedBy = ""
    
    var onSave: (Medication) -> Void
    
    let darkRed = Color(red: 139/255, green: 0, blue: 0) // Dashboard Matching Color
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("MEDICATION DETAILS").foregroundColor(darkRed).bold()) {
                    TextField("Medication Name", text: $name)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                    
                    TextField("Dosage (e.g., 10mg)", text: $dosage)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                    
                    Picker("Frequency", selection: $frequency) {
                        Text("Daily").tag("Daily")
                        Text("Every 8 hours").tag("Every 8 hours")
                        Text("Every 12 hours").tag("Every 12 hours")
                    }
                    .pickerStyle(MenuPickerStyle())
                    
                    Picker("Time of Day", selection: $timeOfDay) {
                        Text("Morning").tag("Morning")
                        Text("Afternoon").tag("Afternoon")
                        Text("Evening").tag("Evening")
                    }
                    .pickerStyle(MenuPickerStyle())
                }
                
                Section(header: Text("DURATION").foregroundColor(darkRed).bold()) {
                    DatePicker("Start Date", selection: $startDate, displayedComponents: .date)
                        .datePickerStyle(CompactDatePickerStyle())
                    DatePicker("End Date", selection: $endDate, displayedComponents: .date)
                        .datePickerStyle(CompactDatePickerStyle())
                }
                
                Section(header: Text("PRESCRIBER INFO").foregroundColor(darkRed).bold()) {
                    TextField("Prescribed By (Doctor's Name)", text: $prescribedBy)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                }
            }
            .navigationTitle("Add Medication")
            .navigationBarItems(trailing: Button("Save") {
                let newMedication = Medication(
                    name: name,
                    dosage: dosage,
                    frequency: frequency,
                    startDate: startDate,
                    endDate: endDate,
                    timeOfDay: timeOfDay,
                    prescribedBy: prescribedBy
                )
                onSave(newMedication)
                presentationMode.wrappedValue.dismiss()
            }.foregroundColor(darkRed))
        }
    }
}

import SwiftUI
import FirebaseAuth

struct LoginView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @State private var email = ""
    @State private var password = ""
    @State private var errorMessage = ""
    @State private var isCreatingAccount = false

    let darkRed = Color(red: 139/255, green: 0, blue: 0) // Dark Red Color

    var body: some View {
        VStack(spacing: 20) {
            // Axxess Logo
            Image("Axxess_Logo") // Make sure this matches your asset file name
                .resizable()
                .scaledToFit()
                .frame(height: 60) // Adjust size if needed
                .padding(.top, 40)

            // Email & Password Fields
            VStack(spacing: 15) {
                TextField("Email", text: $email)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.horizontal)
                    .padding(.top, 10)

                SecureField("Password", text: $password)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding(.horizontal)
            }

            // Login Button
            Button(action: {
                if email.isEmpty || password.isEmpty {
                    errorMessage = "Please enter both email and password."
                } else {
                    errorMessage = ""
                    Auth.auth().signIn(withEmail: email, password: password) { authResult, error in
                        if let error = error {
                            errorMessage = error.localizedDescription
                        } else {
                            //authViewModel.isAuthenticated = true
                            // print("testing")
                            authViewModel.login(email: email, password: password)
                        }
                    }
                }
            }) {
                Text("Login")
                    .foregroundColor(.white)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(darkRed)
                    .cornerRadius(10)
            }
            .padding(.horizontal)

            // Create Account Button
            Button(action: {
                isCreatingAccount = true
            }) {
                Text("Create Account")
                    .foregroundColor(darkRed)
                    .bold()
                    .padding()
            }
            .sheet(isPresented: $isCreatingAccount) {
                CreateAccountView()
            }

            // Error Message Display
            if !errorMessage.isEmpty {
                Text(errorMessage)
                    .foregroundColor(.red)
            }

            // Success Message Display
            if authViewModel.isAuthenticated {
                Text("✅ Login Successful!")
                    .foregroundColor(.green)
            }
        }
        .padding()
    }
}
//
//  NavigationBarView.swift
//  healthapp
//
//  Created by Omer Erturk on 2/22/25.
//

import SwiftUI

struct ContentView: View {
    @State private var isDoctor = false // Toggle for demo purposes

    var body: some View {
        NavigationView {
            VStack {
                if isDoctor {
                    DoctorView()
                } else {
                    PatientView()
                }
                
                // Toggle between views for testing
                Button(action: {
                    isDoctor.toggle()
                }) {
                    Text("Switch to \(isDoctor ? "Patient" : "Doctor") View")
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
                .padding()
            }
        }
    }
}

struct PatientView: View {
    var body: some View {
        VStack {
            Text("Welcome, Patient!")
                .font(.largeTitle)
        }
        .navigationTitle("Patient Dashboard")
        .navigationBarItems(trailing: Button("Profile") {
            // Action for patient profile
        })
    }
}

struct DoctorView: View {
    var body: some View {
        VStack {
            Text("Welcome, Doctor!")
                .font(.largeTitle)
        }
        .navigationTitle("Doctor Dashboard")
        .navigationBarItems(
            leading: Button("Appointments") {
                // Action for appointments
            },
            trailing: Button("Profile") {
                // Action for doctor profile
            }
        )
    }
}
import SwiftUI

struct PatientProfileView: View {
    @ObservedObject var viewModel = PatientInfoViewModel()

    var body: some View {
        VStack(spacing: 20) {
            Text("Patient Profile")
                .font(.largeTitle)
                .bold()
                .foregroundColor(Color(red: 139/255, green: 0, blue: 0))

            VStack(alignment: .leading, spacing: 10) {
                if let patient = viewModel.patientInfo {
                    Text("Name: \(patient.name)")
                    Text("Age: \(patient.age)")
                    Text("Gender: \(patient.gender)")
                    Text("Contact: \(patient.contactNumber)")
                    Text("Email: \(patient.email)")
                } else {
                    Text("Loading profile...")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
            .background(Color.white)
            .cornerRadius(12)
            .shadow(radius: 3)
            .padding(.horizontal)

            Spacer()
        }
        .onAppear {
            viewModel.fetchPatientInfo()
        }
    }
}

//
//  ViewModel.swift
//  healthapp
//
//  Created by Omer Erturk on 2/22/25.
//

// AIChatView.swift
import SwiftUI

struct AIChatView: View {
    @State private var userMessage: String = ""
    @State private var chatLog: [String] = ["AI: Hi! I'm your health assistant. How can I help?"]
    
    // Fetch patient profile info
    @EnvironmentObject var patientInfoVM: PatientInfoViewModel
    // Fetch patient medications from Firebase using the current user's UID
    @StateObject private var medicationVM = MedicationViewModel(userID: FirebaseManager.shared.auth.currentUser?.uid ?? "")
    
    let darkRed = Color(red: 139/255, green: 0, blue: 0)
    
    var body: some View {
        VStack {
            ScrollViewReader { proxy in
                ScrollView {
                    VStack(alignment: .leading, spacing: 10) {
                        ForEach(chatLog.indices, id: \.self) { index in
                            ChatBubble(message: chatLog[index])
                                .id(index)
                        }
                    }
                    .padding()
                }
                .onChange(of: chatLog.count) { _ in
                    withAnimation {
                        proxy.scrollTo(chatLog.count - 1, anchor: .bottom)
                    }
                }
            }
            
            HStack {
                TextField("Type your message...", text: $userMessage)
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(20)
                
                Button(action: sendMessage) {
                    Image(systemName: "paperplane.fill")
                        .foregroundColor(.white)
                        .padding()
                        .background(darkRed)
                        .clipShape(Circle())
                }
            }
            .padding()
        }
        .navigationTitle("AI Assistant")
        .navigationBarTitleDisplayMode(.inline)
    }
    
    func sendMessage() {
        guard !userMessage.isEmpty else { return }
        
        // Append the user's message to the chat log
        chatLog.append("You: \(userMessage)")
        
        // Build the context string from patient info and medications
        var context = ""
        if let info = patientInfoVM.patientInfo {
            context += "Patient Info: Name: \(info.name), Age: \(info.age), Gender: \(info.gender), Contact: \(info.contactNumber).\n"
        }
        if !medicationVM.medications.isEmpty {
            context += "Current Medications:\n"
            for med in medicationVM.medications {
                context += "- \(med.name) (Dosage: \(med.dosage), Frequency: \(med.frequency), Time: \(med.timeOfDay)).\n"
            }
        }
        
        // Combine context with the user's question
        let prompt = "\(context)\nUser question: \(userMessage)"
        print("Sending prompt to ChatGPT: \(prompt)")
        
        // Send the prompt to ChatGPT using the API call
        sendPromptToChatGPT(prompt: prompt) { response in
            DispatchQueue.main.async {
                self.chatLog.append("AI: \(response)")
            }
        }
        
        userMessage = ""
    }
    
    func sendPromptToChatGPT(prompt: String, completion: @escaping (String) -> Void) {
        // Retrieve the API key from Info.plist.
        // (Your Info.plist file is automatically created by Xcode in your project.
        // Open it in the Project Navigator, and add a key named "OpenAIAPIKey" with your key as its value.)
        guard let apiKey = Bundle.main.object(forInfoDictionaryKey: "OpenAI_API_KEY") as? String, !apiKey.isEmpty else {
            print("OpenAI API key not found in Info.plist")
            completion("Error: API key missing")
            return
        }
        
        // Set up the OpenAI Chat Completions endpoint
        guard let url = URL(string: "https://api.openai.com/v1/chat/completions") else {
            completion("Error: Invalid URL")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        
        // Build the JSON payload with your chosen model and parameters
        let parameters: [String: Any] = [
            "model": "gpt-3.5-turbo",
            "messages": [
                ["role": "system", "content": "You are a helpful assistant that incorporates patient context."],
                ["role": "user", "content": prompt]
            ],
            "max_tokens": 150,
            "temperature": 0.7
        ]
        
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: parameters)
            request.httpBody = jsonData
        } catch {
            print("Error serializing JSON: \(error)")
            completion("Error serializing JSON")
            return
        }
        
        // Perform the API request
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Error in API call: \(error)")
                completion("Error: \(error.localizedDescription)")
                return
            }
            guard let data = data else {
                completion("Error: No data returned")
                return
            }
            do {
                // Parse the response JSON to extract the generated message
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    completion(content)
                } else {
                    completion("Error parsing response")
                }
            } catch {
                completion("Error parsing JSON: \(error.localizedDescription)")
            }
        }.resume()
    }
}

struct ChatBubble: View {
    let message: String
    
    var body: some View {
        HStack {
            if message.hasPrefix("AI:") {
                Text(message)
                    .padding()
                    .background(Color.gray.opacity(0.2))
                    .cornerRadius(15)
                    .frame(maxWidth: 250, alignment: .leading)
                Spacer()
            } else {
                Spacer()
                Text(message)
                    .padding()
                    .background(Color.blue.opacity(0.8))
                    .foregroundColor(.white)
                    .cornerRadius(15)
                    .frame(maxWidth: 250, alignment: .trailing)
            }
        }
    }
}
//
//  CreateAccountView.swift
//  healthapp
//
//  Created by Lukas Lindestaf on 2/22/25.
//
import SwiftUI
import FirebaseAuth
import FirebaseFirestore

struct CreateAccountView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @State private var name = ""
    @State private var age = ""
    @State private var gender = ""
    @State private var contactNumber = ""
    @State private var email = ""
    @State private var password = ""
    @State private var role = "Patient"  // Default role is "Patient"
    @State private var roles = ["Doctor", "Patient"]
    @State private var errorMessage = ""
    @Environment(\.presentationMode) var presentationMode

    var body: some View {
        VStack(spacing: 15) {
            Text("Create Account")
                .font(.largeTitle)
                .bold()
            
            TextField("Full Name", text: $name)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)
            
            TextField("Age", text: $age)
                .keyboardType(.numberPad)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)

            TextField("Gender", text: $gender)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)

            TextField("Contact Number", text: $contactNumber)
                .keyboardType(.phonePad)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)

            TextField("Email", text: $email)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)

            SecureField("Password", text: $password)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)

            Picker("Select Role", selection: $role) {
                ForEach(roles, id: \.self) { role in
                    Text(role)
                }
            }
            .pickerStyle(SegmentedPickerStyle())
            .padding(.horizontal)

            Button(action: {
                guard let ageInt = Int(age) else {
                    errorMessage = "Please enter a valid age."
                    return
                }
                
                registerUser(email: email, password: password, name: name, age: ageInt, gender: gender, contactNumber: contactNumber, role: role) { error in
                    if let error = error {
                        errorMessage = error.localizedDescription
                    } else {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }) {
                Text("Sign Up")
                    .foregroundColor(.white)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.green)
                    .cornerRadius(10)
            }
            .padding(.horizontal)

            if !errorMessage.isEmpty {
                Text(errorMessage)
                    .foregroundColor(.red)
            }
        }
        .padding()
    }
}

// ✅ Firebase Registration Function to Save User Data
func registerUser(email: String, password: String, name: String, age: Int, gender: String, contactNumber: String, role: String, completion: @escaping (Error?) -> Void) {
    Auth.auth().createUser(withEmail: email, password: password) { authResult, error in
        if let error = error {
            completion(error)
            return
        }

        guard let uid = authResult?.user.uid else { return }

        let userData: [String: Any] = [
            "email": email,
            "name": name,
            "age": age,
            "gender": gender,
            "contactNumber": contactNumber,
            "role": role
        ]

        Firestore.firestore().collection("users").document(uid).setData(userData) { error in
            completion(error)
        }
    }
}


//
//  DoctorMedicationFormView.swift
//  healthapp
//
//  Created by David Santos on 2/23/25.
//


// DoctorMedicationFormView.swift (in Views folder)
import SwiftUI

struct DoctorMedicationFormView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var name = ""
    @State private var dosage = ""
    @State private var frequency = "Daily"
    @State private var startDate = Date()
    @State private var endDate = Date()
    @State private var timeOfDay = "Morning"
    @State private var prescribedBy = ""
    
    var onSave: (Medication) -> Void
    
    let darkRed = Color(red: 139/255, green: 0, blue: 0)
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("MEDICATION DETAILS").foregroundColor(darkRed).bold()) {
                    TextField("Medication Name", text: $name)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                    
                    TextField("Dosage (e.g., 10mg)", text: $dosage)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                    
                    Picker("Frequency", selection: $frequency) {
                        Text("Daily").tag("Daily")
                        Text("Every 8 hours").tag("Every 8 hours")
                        Text("Every 12 hours").tag("Every 12 hours")
                    }
                    .pickerStyle(MenuPickerStyle())
                    
                    Picker("Time of Day", selection: $timeOfDay) {
                        Text("Morning").tag("Morning")
                        Text("Afternoon").tag("Afternoon")
                        Text("Evening").tag("Evening")
                    }
                    .pickerStyle(MenuPickerStyle())
                }
                
                Section(header: Text("DURATION").foregroundColor(darkRed).bold()) {
                    DatePicker("Start Date", selection: $startDate, displayedComponents: .date)
                        .datePickerStyle(CompactDatePickerStyle())
                    DatePicker("End Date", selection: $endDate, displayedComponents: .date)
                        .datePickerStyle(CompactDatePickerStyle())
                }
                
                Section(header: Text("PRESCRIBER INFO").foregroundColor(darkRed).bold()) {
                    TextField("Prescribed By (Doctor's Name)", text: $prescribedBy)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                }
            }
            .navigationTitle("Add Medication")
            .navigationBarItems(trailing: Button("Save") {
                let newMedication = Medication(
                    name: name,
                    dosage: dosage,
                    frequency: frequency,
                    startDate: startDate,
                    endDate: endDate,
                    timeOfDay: timeOfDay,
                    prescribedBy: prescribedBy
                )
                onSave(newMedication)
                presentationMode.wrappedValue.dismiss()
            }
            .foregroundColor(darkRed))
        }
    }
}
//
//  AddPatientView.swift
//  healthapp
//
//  Created by David Santos on 2/23/25.
//


// AddPatientView.swift (in Views folder)
import SwiftUI
import FirebaseFirestore
import FirebaseAuth

struct AddPatientView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var patientEmail: String = ""
    @State private var errorMessage: String = ""
    
    // Closure to pass back the new patient
    var onAddPatient: (DoctorPatient) -> Void
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Patient Email")) {
                    TextField("Enter patient's email", text: $patientEmail)
                        .keyboardType(.emailAddress)
                }
                if !errorMessage.isEmpty {
                    Text(errorMessage)
                        .foregroundColor(.red)
                }
            }
            .navigationTitle("Add Patient")
            .navigationBarItems(trailing: Button("Add") {
                addPatientByEmail()
            })
        }
    }
    
    func addPatientByEmail() {
        let db = FirebaseManager.shared.firestore
        db.collection("users")
            .whereField("email", isEqualTo: patientEmail)
            .getDocuments { snapshot, error in
                if let error = error {
                    errorMessage = error.localizedDescription
                    return
                }
                guard let documents = snapshot?.documents, let doc = documents.first,
                      let role = doc.data()["role"] as? String, role.lowercased() == "patient" else {
                    errorMessage = "No patient found with that email."
                    return
                }
                
                // Optionally, you might want to fetch the patient's name from their document.
                let name = doc.data()["name"] as? String ?? "Unnamed Patient"
                let patient = DoctorPatient(id: doc.documentID, name: name, email: patientEmail)
                onAddPatient(patient)
                presentationMode.wrappedValue.dismiss()
            }
    }
}
//
//  DoctorPatientMedicationsView.swift
//  healthapp
//
//  Created by David Santos on 2/23/25.
//


// DoctorPatientMedicationsView.swift (in Views folder)
import SwiftUI

struct DoctorPatientMedicationsView: View {
    let patient: DoctorPatient
    @StateObject private var medicationVM: MedicationViewModel
    @State private var showAddMedication = false
    
    let darkRed = Color(red: 139/255, green: 0, blue: 0)
    
    init(patient: DoctorPatient) {
        self.patient = patient
        // Initialize MedicationViewModel with the patient's UID.
        _medicationVM = StateObject(wrappedValue: MedicationViewModel(userID: patient.id))
    }
    
    var body: some View {
        VStack {
            Text("\(patient.name)'s Medications")
                .font(.largeTitle)
                .padding()
            
            if medicationVM.medications.isEmpty {
                Text("No medications found for this patient.")
                    .foregroundColor(.gray)
            } else {
                List {
                    ForEach(medicationVM.medications) { medication in
                        MedicationCard(medication: medication, darkRed: darkRed, onToggleTaken: { newState in
                            var updatedMedication = medication
                            updatedMedication.isTaken = newState
                            medicationVM.updateMedication(updatedMedication)
                        })
                    }
                    .onDelete { indexSet in
                        indexSet.forEach { index in
                            let medication = medicationVM.medications[index]
                            medicationVM.deleteMedication(medication)
                        }
                    }
                }
                .listStyle(PlainListStyle())
            }
            
            Button(action: {
                showAddMedication = true
            }) {
                Text("Add Medication")
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.green)
                    .foregroundColor(.white)
                    .cornerRadius(12)
            }
            .padding()
            .sheet(isPresented: $showAddMedication) {
                DoctorMedicationFormView { newMedication in
                    medicationVM.addMedication(newMedication)
                }
            }
            
            Spacer()
        }
        .navigationTitle("Patient Medications")
    }
}
//
//  FirebaseManager.swift
//  healthapp
//
//  Created by David Santos on 2/22/25.
//


import Foundation
import FirebaseCore
import FirebaseAuth
import FirebaseFirestore

class FirebaseManager: ObservableObject {
    static let shared = FirebaseManager()

    let auth: Auth
    let firestore: Firestore

    private init() {
        //FirebaseApp.configure()
        self.auth = Auth.auth()
        self.firestore = Firestore.firestore()
    }
}
